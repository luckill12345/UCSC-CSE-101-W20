// Filename: stackrecursion.cpp
//
// The file basically contains two functions that generate all subsequences of an input string. One function is the (standard) recursive method,
// while the other is non-recursive and uses a stack. Both these functions have an identical output, and create a (linked) list of strings as their output.
//
// The code uses the List data structure used in a number of CSE101 assignments and tests.
//
// USAGE:  (the executable is generated by a Makefile)
//     ./stackrecursion <INPUT FILE> <OUTPUT FILE>
//
//     Only the first line of <INPUT FILE> is read, as a string. <OUTPUT FILE> contains all subsequences, each in a separate line.
//
//
// C. Seshadhri, Jan 2020

#include <iostream>
#include "list.h"
#include <stack>
#include <stdexcept>
#include <fstream>
#include <array>
#include <vector>
#include <algorithm>
#include <sstream>
using namespace std;

// This class keeps pairs of string. This is useful for simulating the recursion through as stack.
class Pair
{
public:
    string in_str;
    string fixed_str;
    int k = 0;
};

// This function generates all subsequences of the input input_str, and outputs them as a list. This function does not use recursion.
// Input: string input_str
// Output: list of all subsequences of input_str
//
List allSubSeqStack(string input_str)
{
    List final_output;            // generate empty list
    stack<class Pair> recurStack; // empty stack that performs the recursion
    Pair init, stacktop;          // create a pair to push, to start the stac
    init.in_str = input_str;      // put the initial string
    init.fixed_str = "";          // this is the fixed string, initially empty
    recurStack.push(init);        // push this pair onto the top

    while (!recurStack.empty()) // while the stack is non-empty
    {
        stacktop = recurStack.top();       // get the top pair in stack
        recurStack.pop();                  // remove the top element of stack
        if (stacktop.in_str.length() == 0) // input string is empty, so this is base case
        {
            final_output.insert(stacktop.fixed_str); // insert the fixed string onto list
            continue;                                // pop the next element of stack
        }
        char last = stacktop.in_str.back(); // get last element of in_str
        stacktop.in_str.pop_back();         // remove last element of stack
        Pair to_push;                       // setting up elements to push onto stack
        to_push.in_str = stacktop.in_str;
        to_push.fixed_str = stacktop.fixed_str;
        recurStack.push(to_push);                      // this is for one recursive call
        to_push.fixed_str = last + stacktop.fixed_str; // this is for next recursive call
        recurStack.push(to_push);
    }
    return final_output;
}

// This recursive function generates all subsequences of the input in_str *appended* to the fixed_str, and outputs them in the list provided as an argument
// Input: string fixed_str, string in_str, pointer to list list_ptr
// Output: void, but list referenced by list_ptr is modified
//
void allSubSeqRec(string in_str, string fixed_str, List *list_ptr)
{
    if (in_str.length() == 0) // base case
    {
        list_ptr->insert(fixed_str); // insert the fixed string into list
        return;
    }
    char top = in_str.back();                        // get the last element of the string
    in_str.pop_back();                               // delete last element of in_str
    allSubSeqRec(in_str, fixed_str, list_ptr);       // recursive call for subsequences without top
    allSubSeqRec(in_str, top + fixed_str, list_ptr); //  recursive call for subsequences with top
    return;
}

// This function generates all subsequences of the input in_str, and outputs them as a list. This is the recursive version
// Input: string in_str
// Output: list of all subsequences of in_str
//
List allSubSeq(string in_str)
{
    List *final_output = new List();        // generate empty list
    allSubSeqRec(in_str, "", final_output); // populate list with output
    return *final_output;
}

List allAnagrams(string input)
{
    List final_output;
    stack<class Pair> Stack;
    Pair init, stacktop;
    init.in_str = input;
    init.fixed_str = "";
    Stack.push(init);
    int n = input.length();

    while (!Stack.empty())
    {
        stacktop = Stack.top();
        Stack.pop();
        if ((int)stacktop.fixed_str.length() == n)
        {
            final_output.insert(stacktop.fixed_str);
            continue;
        }
        for (int i = 0; i < (int)stacktop.in_str.length(); i++)
        {
            Pair to_push;
            char tgt = stacktop.in_str.at(i);
            to_push.in_str = stacktop.in_str.substr(0, i) + stacktop.in_str.substr(i + 1, stacktop.in_str.length());
            to_push.fixed_str = stacktop.fixed_str + tgt;
            Stack.push(to_push);
        }
    }
    return final_output;
}

List language(string input, int k)
{
    List final_output;
    stack<class Pair> Stack;
    Pair init, stacktop;
    init.in_str = input;
    init.fixed_str = "";
    Stack.push(init);
    int n = input.length();

    while (!Stack.empty())
    {
        stacktop = Stack.top();
        Stack.pop();
        if (((int)stacktop.fixed_str.length() == k || stacktop.k >= k))
        {
            if (final_output.find(stacktop.fixed_str) == NULL)
            {
                final_output.insert(stacktop.fixed_str);
            }
            continue;
        }

        for (int i = 0; i < (int)stacktop.in_str.length(); i++)
        {
            Pair to_push;
            char tgt = stacktop.in_str.at(i);
            to_push.in_str = stacktop.in_str;

            to_push.fixed_str = stacktop.fixed_str + tgt;
            to_push.k = stacktop.k + 1;
            Stack.push(to_push);

            to_push.fixed_str = stacktop.fixed_str;
            to_push.k = stacktop.k + k;
            Stack.push(to_push);
        }
    }
    return final_output;
}

bool isValid(string input, string generated, int k)
{
    bool res = true;
    for (int i = 0; i < (int)input.length(); i++)
    {
        char temp = input.at(i);
        if (k * count(input.begin(), input.end(), temp) < count(generated.begin(), generated.end(), temp))
        {
            res = false;
        }
    }
    return res;
}

List stretch(string input, int k)
{
    List final_output;
    stack<class Pair> Stack;
    Pair init, stacktop;
    init.in_str = input;
    init.fixed_str = input;
    Stack.push(init);
    int n = input.length();

    while (!Stack.empty())
    {
        stacktop = Stack.top();
        Stack.pop();
        if ((int)stacktop.fixed_str.length() == k * n || stacktop.k >= k)
        {
            if (final_output.find(stacktop.fixed_str) == NULL && isValid(input, stacktop.fixed_str, k))
            {
                final_output.insert(stacktop.fixed_str);
            }
            continue;
        }
        for (int i = 0; i < (int)stacktop.in_str.length(); i++)
        {
            Pair to_push;
            char tgt = stacktop.in_str.at(i);
            to_push.in_str = stacktop.in_str;

            to_push.fixed_str = stacktop.fixed_str;
            to_push.k = stacktop.k + k;
            Stack.push(to_push);

            to_push.fixed_str = stacktop.fixed_str.substr(0, stacktop.fixed_str.find(tgt)) + tgt + stacktop.fixed_str.substr(stacktop.fixed_str.find(tgt), stacktop.fixed_str.length());
            to_push.k = stacktop.k + 1;
            Stack.push(to_push);
        }
    }
    return final_output;
}

int main(int argc, char **argv)
{
    if (argc < 3) // must provide two arguments as input
    {
        throw std::invalid_argument("Usage: ./hello <INPUT FILE> <OUTPUT FILE>"); // throw error
    }

    ifstream input;  // stream for input file
    ofstream output; // stream for output file

    input.open(argv[1]);  // open input file
    output.open(argv[2]); // open output file

    string in_str; // to store the input string from the file

    getline(input, in_str); // get the single string from the input file

    List myList = allSubSeqStack(in_str); // initializing the linked list

    myList.sort(); // sort the list

    output << myList.print("\n") << endl; // print the list, using a new line as delimiter between items of the list

    myList.deleteList(); // free all the memory of this list

    List anagrm = allAnagrams(in_str); // initializing the linked list

    anagrm.sort(); // sort the list

    output << "AllAnagrams-------------------------\n"
           << anagrm.print("\n") << endl; // print the list, using a new line as delimiter between items of the list

    anagrm.deleteList(); // free all the memory of this list

    List lang = language(in_str, 3); // initializing the linked list

    lang.sort(); // sort the list

    output << "Language-------------------------\n"
           << lang.print("\n") << endl; // print the list, using a new line as delimiter between items of the list

    lang.deleteList(); // free all the memory of this list

    List strch = stretch(in_str, 5); // initializing the linked list

    strch.sort(); // sort the list

    output << "Stretch-------------------------\n"
           << strch.print("\n") << endl; // print the list, using a new line as delimiter between items of the list

    strch.deleteList(); // free all the memory of this list

    input.close();
    output.close();
}
